{"version":3,"sources":["../node_modules/left-pad/index.js","ticket/components/Schedule.js"],"names":["module","exports","str","len","ch","length","cache","pad","ScheduleRow","memo","props","index","station","arriveTime","leaveTime","stay","isStartStation","isEndStation","isLeaveStation","isArriveStation","beforeLeaveStation","afterArriveStation","className","filter","Boolean","join","leftPad","Schedule","date","trainNumber","leaveStation","arriveStation","useState","scheduleList","setScheduleList","useEffect","url","URI","setSearch","dayjs","format","toString","fetch","then","res","json","data","leaveRow","arriveRow","i","Object","assign","departTime","map","schedule","key"],"mappings":"oHAMAA,EAAOC,QAeP,SAAkBC,EAAKC,EAAKC,GAM1B,IAFAD,IAFAD,GAAY,IAEIG,SAEL,EAAG,OAAOH,EAEhBE,GAAa,IAAPA,IAAUA,EAAK,KAI1B,GAAW,OAFXA,GAAU,KAEQD,EAAM,GAAI,OAAOG,EAAMH,GAAOD,EAEhD,IAAIK,EAAM,GAEV,KAEY,EAANJ,IAASI,GAAOH,GAEpBD,IAAQ,GAICC,GAAMA,EAKjB,OAAOG,EAAML,GA1Cf,IAAII,EAAQ,CACV,GACA,IACA,KACA,MACA,OACA,QACA,SACA,UACA,WACA,c,wICVIE,G,MAAcC,gBAAK,SAAqBC,GAAQ,IAElDC,EAWED,EAXFC,MACAC,EAUEF,EAVFE,QACAC,EASEH,EATFG,WACAC,EAQEJ,EARFI,UACAC,EAOEL,EAPFK,KACAC,EAMEN,EANFM,eACAC,EAKEP,EALFO,aACAC,EAIER,EAJFQ,eACAC,EAGET,EAHFS,gBACAC,EAEEV,EAFFU,mBACAC,EACEX,EADFW,mBAGF,OACE,4BACE,yBACEC,UAAW,CAAC,OAAQJ,GAAkBC,EAAkB,WAAa,IAClEI,OAAOC,SACPC,KAAK,MACPP,EAAiB,SAAMC,EAAkB,SAAMO,IAAQf,EAAO,EAAG,IAEpE,yBACEW,UAAW,CAAC,MAAOF,GAAsBC,EAAqB,OAAS,IACpEE,OAAOC,SACPC,KAAK,MACR,0BACEH,UAAW,CAAC,UAAWH,GAAmBD,EAAiB,MAAQ,IAChEK,OAAOC,SACPC,KAAK,MACPb,GAEH,0BAAMU,UAAW,CAAC,UAAWH,EAAkB,MAAQ,IAAII,OAAOC,SAASC,KAAK,MAC7ET,EAAiB,qBAAQH,GAE5B,0BAAMS,UAAW,CAAC,UAAWJ,EAAiB,MAAQ,IAAIK,OAAOC,SAASC,KAAK,MAC5ER,EAAe,sBAASH,GAE3B,0BAAMQ,UAAU,YAAYN,GAAkBC,EAAe,IAAMF,EAAO,gBAkHnEY,UAhGf,SAAkBjB,GAAQ,IAChBkB,EAAmDlB,EAAnDkB,KAAMC,EAA6CnB,EAA7CmB,YAAaC,EAAgCpB,EAAhCoB,aAAcC,EAAkBrB,EAAlBqB,cADlB,EAGiBC,mBAAS,IAH1B,mBAGhBC,EAHgB,KAGFC,EAHE,KAsEvB,OAjEAC,qBAAU,WACR,IAAMC,EAAM,IAAIC,IAAI,kBACjBC,UAAU,cAAeT,GACzBS,UAAU,eAAgBR,GAC1BQ,UAAU,gBAAiBP,GAC3BO,UAAU,OAAQC,IAAMX,GAAMY,OAAO,eACrCC,WAEHC,MAAMN,GACHO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAGJ,IAFA,IAAIC,EACAC,EACKC,EAAI,EAAGA,EAAIH,EAAKzC,OAAQ4C,IAC1BF,EAgBOC,EAiBVE,OAAOC,OAAOL,EAAKG,GAAI,CACrB7B,oBAAoB,EACpBF,gBAAgB,EAChBG,oBAAoB,EACpBF,iBAAiB,IApBf2B,EAAKG,GAAGrC,UAAYmB,EACtBiB,EAAYE,OAAOC,OAAOL,EAAKG,GAAI,CACjC7B,oBAAoB,EACpBF,gBAAgB,EAChBG,oBAAoB,EACpBF,iBAAiB,IAGnB+B,OAAOC,OAAOL,EAAKG,GAAI,CACrB7B,oBAAoB,EACpBF,gBAAgB,EAChBG,oBAAoB,EACpBF,iBAAiB,IA5BjB2B,EAAKG,GAAGrC,UAAYkB,EACtBiB,EAAWG,OAAOC,OAAOL,EAAKG,GAAI,CAChC7B,oBAAoB,EACpBF,gBAAgB,EAChBG,oBAAoB,EACpBF,iBAAiB,IAGnB+B,OAAOC,OAAOL,EAAKG,GAAI,CACrB7B,oBAAoB,EACpBF,gBAAgB,EAChBG,oBAAoB,EACpBF,iBAAiB,IA4BvB+B,OAAOC,OAAOL,EAAKG,GAAI,CACrBjC,eAAsB,IAANiC,EAChBhC,aAAcgC,IAAMH,EAAKzC,OAAS,EAClCS,UAAWgC,EAAKG,GAAGG,aAGvBlB,EAAgBY,QAEnB,CAAClB,EAAMC,EAAaC,EAAcC,IAGnC,yBAAKT,UAAU,YACb,yBAAKA,UAAU,UACb,8DACA,yBAAKA,UAAU,QACb,0BAAMA,UAAU,WAAhB,gBACA,0BAAMA,UAAU,WAAhB,gBACA,0BAAMA,UAAU,WAAhB,gBACA,0BAAMA,UAAU,YAAhB,6BAEF,4BACGW,EAAaoB,KAAI,SAACC,EAAU3C,GAC3B,OAAO,kBAACH,EAAD,eAAaG,MAAOA,EAAQ,EAAG4C,IAAKD,EAAS1C,SAAa0C","file":"static/js/10.8457a6a4.chunk.js","sourcesContent":["/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\n'use strict';\nmodule.exports = leftPad;\n\nvar cache = [\n  '',\n  ' ',\n  '  ',\n  '   ',\n  '    ',\n  '     ',\n  '      ',\n  '       ',\n  '        ',\n  '         '\n];\n\nfunction leftPad (str, len, ch) {\n  // convert `str` to a `string`\n  str = str + '';\n  // `len` is the `pad`'s length now\n  len = len - str.length;\n  // doesn't need to pad\n  if (len <= 0) return str;\n  // `ch` defaults to `' '`\n  if (!ch && ch !== 0) ch = ' ';\n  // convert `ch` to a `string` cuz it could be a number\n  ch = ch + '';\n  // cache common use cases\n  if (ch === ' ' && len < 10) return cache[len] + str;\n  // `pad` starts with an empty string\n  var pad = '';\n  // loop\n  while (true) {\n    // add `ch` to `pad` if `len` is odd\n    if (len & 1) pad += ch;\n    // divide `len` by 2, ditch the remainder\n    len >>= 1;\n    // \"double\" the `ch` so this operation count grows logarithmically on `len`\n    // each time `ch` is \"doubled\", the `len` would need to be \"doubled\" too\n    // similar to finding a value in binary search tree, hence O(log(n))\n    if (len) ch += ch;\n    // `len` is 0, exit the loop\n    else break;\n  }\n  // pad `str`!\n  return pad + str;\n}\n","import React, { memo, useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport leftPad from 'left-pad';\nimport URI from 'urijs';\nimport dayjs from 'dayjs';\n\nimport './Schedule.css';\n\nconst ScheduleRow = memo(function ScheduleRow(props) {\n  const {\n    index,\n    station,\n    arriveTime,\n    leaveTime,\n    stay,\n    isStartStation,\n    isEndStation,\n    isLeaveStation,\n    isArriveStation,\n    beforeLeaveStation,\n    afterArriveStation\n  } = props;\n\n  return (\n    <li>\n      <div\n        className={['icon', isLeaveStation || isArriveStation ? 'icon-red' : '']\n          .filter(Boolean)\n          .join(' ')}>\n        {isLeaveStation ? '出' : isArriveStation ? '到' : leftPad(index, 2, 0)}\n      </div>\n      <div\n        className={['row', beforeLeaveStation || afterArriveStation ? 'grey' : '']\n          .filter(Boolean)\n          .join(' ')}>\n        <span\n          className={['station', isArriveStation || isLeaveStation ? 'red' : '']\n            .filter(Boolean)\n            .join(' ')}>\n          {station}\n        </span>\n        <span className={['arrtime', isArriveStation ? 'red' : ''].filter(Boolean).join(' ')}>\n          {isStartStation ? '始发站' : arriveTime}\n        </span>\n        <span className={['deptime', isLeaveStation ? 'red' : ''].filter(Boolean).join(' ')}>\n          {isEndStation ? ' 终到站' : leaveTime}\n        </span>\n        <span className='stoptime'>{isStartStation || isEndStation ? '-' : stay + '分'}</span>\n      </div>\n    </li>\n  );\n});\nScheduleRow.propTypes = {\n  index: PropTypes.number.isRequired,\n  station: PropTypes.string.isRequired,\n  arriveTime: PropTypes.string,\n  leaveTime: PropTypes.string,\n  stay: PropTypes.number,\n  isStartStation: PropTypes.bool.isRequired,\n  isEndStation: PropTypes.bool.isRequired,\n  isLeaveStation: PropTypes.bool.isRequired,\n  isArriveStation: PropTypes.bool.isRequired,\n  beforeLeaveStation: PropTypes.bool.isRequired,\n  afterArriveStation: PropTypes.bool.isRequired\n};\nfunction Schedule(props) {\n  const { date, trainNumber, leaveStation, arriveStation } = props;\n\n  const [scheduleList, setScheduleList] = useState([]);\n\n  useEffect(() => {\n    const url = new URI('/rest/schedule')\n      .setSearch('trainNumber', trainNumber)\n      .setSearch('departStaion', leaveStation)\n      .setSearch('arriveStation', arriveStation)\n      .setSearch('date', dayjs(date).format('YYYY-MM-DD'))\n      .toString();\n\n    fetch(url)\n      .then(res => res.json())\n      .then(data => {\n        let leaveRow;\n        let arriveRow;\n        for (let i = 0; i < data.length; i++) {\n          if (!leaveRow) {\n            if (data[i].station === leaveStation) {\n              leaveRow = Object.assign(data[i], {\n                beforeLeaveStation: false,\n                isLeaveStation: true,\n                afterArriveStation: false,\n                isArriveStation: false\n              });\n            } else {\n              Object.assign(data[i], {\n                beforeLeaveStation: true,\n                isLeaveStation: false,\n                afterArriveStation: false,\n                isArriveStation: false\n              });\n            }\n          } else if (!arriveRow) {\n            if (data[i].station === arriveStation) {\n              arriveRow = Object.assign(data[i], {\n                beforeLeaveStation: false,\n                isLeaveStation: false,\n                afterArriveStation: false,\n                isArriveStation: true\n              });\n            } else {\n              Object.assign(data[i], {\n                beforeLeaveStation: false,\n                isLeaveStation: false,\n                afterArriveStation: false,\n                isArriveStation: false\n              });\n            }\n          } else {\n            Object.assign(data[i], {\n              beforeLeaveStation: false,\n              isLeaveStation: false,\n              afterArriveStation: true,\n              isArriveStation: false\n            });\n          }\n\n          Object.assign(data[i], {\n            isStartStation: i === 0,\n            isEndStation: i === data.length - 1,\n            leaveTime: data[i].departTime\n          });\n        }\n        setScheduleList(data);\n      });\n  }, [date, trainNumber, leaveStation, arriveStation]);\n\n  return (\n    <div className='schedule'>\n      <div className='dialog'>\n        <h1>列车时刻表</h1>\n        <div className='head'>\n          <span className='station'>车站</span>\n          <span className='deptime'>到达</span>\n          <span className='arrtime'>发车</span>\n          <span className='stoptime'>停留时间</span>\n        </div>\n        <ul>\n          {scheduleList.map((schedule, index) => {\n            return <ScheduleRow index={index + 1} key={schedule.station} {...schedule} />;\n          })}\n        </ul>\n      </div>\n    </div>\n  );\n}\nSchedule.propTypes = {\n  date: PropTypes.number.isRequired,\n  trainNumber: PropTypes.string.isRequired,\n  leaveStation: PropTypes.string.isRequired,\n  arriveStation: PropTypes.string.isRequired\n};\n\nexport default Schedule;\n"],"sourceRoot":""}